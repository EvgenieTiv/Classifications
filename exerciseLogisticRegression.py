import os
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import GridSearchCV

# üß† –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è?
# –≠—Ç–æ –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ.
# –û–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É,
# —á–∞—â–µ –≤—Å–µ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, y = 0 –∏–ª–∏ y = 1).

# 1. –í–∑–≤–µ—à–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏
# –ö–∞–∂–¥–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Height, Age, Group_B, ...) –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –≤–µ—Å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç).
# –°–Ω–∞—á–∞–ª–∞ –æ–Ω–∞ –±–µ—Ä—ë—Ç –ª–∏–Ω–µ–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
# z = w0 + w1*x1 + w2*x2 + ... + wn*xn

# 2. –ü—Ä–∏–º–µ–Ω—è–µ—Ç "S-–æ–±—Ä–∞–∑–Ω—É—é" —Ñ—É–Ω–∫—Ü–∏—é (—Å–∏–≥–º–æ–∏–¥—É)
# –ß—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∏–≥–º–æ–∏–¥—É:
# p = 1 / (1 + exp(-z))

# 3. –†–µ—à–µ–Ω–∏–µ ‚Äî –ø–æ –ø–æ—Ä–æ–≥—É
# –û–±—ã—á–Ω–æ –µ—Å–ª–∏ p >= 0.5, –º–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å 1, –∏–Ω–∞—á–µ ‚Äî –∫–ª–∞—Å—Å 0.

# –ü—É—Ç–∏üîß –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–¥–µ–ª—å –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è?
# # –ü–æ–¥–±–∏—Ä–∞–µ—Ç –≤–µ—Å–∞ w0, w1, ..., wn, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å y –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
# # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è ‚Äî —Ç–æ –µ—Å—Ç—å –∏—â–µ—Ç —Ç–∞–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã,
# —á—Ç–æ–±—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã—à–µ.

# ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é:
# –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–∞/–Ω–µ—Ç, —É—Å–ø–µ—Ö/–Ω–µ—É—Å–ø–µ—Ö, 0 –∏–ª–∏ 1.
# –ö–æ–≥–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ª–∏–Ω–µ–π–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é (–∏–ª–∏ –ø–æ—á—Ç–∏ —Ç–∞–∫).
# –ö–æ–≥–¥–∞ –≤–∞–∂–Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ‚Äî –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã (–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã).

# üîç –ü—Ä–∏–º–µ—Ä:
# –ï—Å–ª–∏ Height, Age, –∏ Group_C –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ, –±—É–¥–µ—Ç –ª–∏ y = 1, –º–æ–¥–µ–ª—å —ç—Ç–æ "–ø–æ–π–º—ë—Ç" –∏ –¥–∞—Å—Ç —ç—Ç–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –±–æ–ª—å—à–∏–µ –≤–µ—Å–∞.

—Åurrent_dir = os.path.dirname(__file__)  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è .py —Ñ–∞–π–ª
# file_path_read_train = os.path.join(—Åurrent_dir, "synthetic_200_rows_with_logic_filled.csv")
# file_path_read_to_predict = os.path.join(—Åurrent_dir, "to_predict_filled.csv")
# file_path_write = os.path.join(—Åurrent_dir, "to_predict_with_y.csv")

file_path_read_train = os.path.join(—Åurrent_dir, "winequality_red_train.csv")
file_path_read_to_predict = os.path.join(—Åurrent_dir, "winequality_red_to_predict.csv")
file_path_write = os.path.join(—Åurrent_dir, "winequality_red_to_predict_with_y.csv")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(file_path_read_train)

# –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (X) –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (y)
features = ["fixed acidity", "volatile acidity", "citric acid", "residual sugar",
            "chlorides", "free sulfur dioxide", "total sulfur dioxide" , "density",
            "pH", "sulphates", "alcohol"]

X = df[features]
y = df["quality"]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
# –®–∞–≥ 1. –û—Ç–¥–µ–ª—è–µ–º test
X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=4, stratify=y)

# –®–∞–≥ 2. –ò–∑ X_temp –¥–µ–ª–∞–µ–º train –∏ validation (20% –æ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è, —Ç.–µ. 16% –æ—Ç –≤—Å–µ—Ö)
# ‚ùì–ó–∞—á–µ–º validation:
# –ù–∞ –Ω—ë–º –Ω–µ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å, –∞ –æ—Ü–µ–Ω–∏–≤–∞–µ–º, –∫–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, C –≤ LogisticRegression).
# –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–µ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å, –∏ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–µ –∑–∞–≥–ª—è–¥—ã–≤–∞—è –≤ —Ç–µ—Å—Ç.
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.2, random_state=4, stratify=y_temp)

# –ü—Ä–æ–≤–µ—Ä–∏–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤
print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ y_train:")
print(y_train.value_counts(normalize=True).sort_index())

# üìå –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
# train ‚âà 64% –¥–∞–Ω–Ω—ã—Ö
# validation ‚âà 16%
# test = 20%
print(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape}")
print(f"–†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_val.shape}")
print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_test.shape}")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
categorical_features = []
numeric_features = ["fixed acidity", "volatile acidity", "citric acid", "residual sugar",
            "chlorides", "free sulfur dioxide", "total sulfur dioxide" , "density",
            "pH", "sulphates", "alcohol"]


# StandardScaler: z = (x-mean)/std_dev
# –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: one-hot –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö
# OneHotEncoder ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Group": A, B, C) –≤ –Ω–∞–±–æ—Ä –±–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫.

preprocessor = ColumnTransformer(transformers=[
    ("num", StandardScaler(), numeric_features),
    ("cat", OneHotEncoder(drop='first'), categorical_features)
])

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ train (fit), –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º (transform)
# üß† –ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å fit_transform –Ω–∞ val/test?
# –ü–æ—Ç–æ–º—É —á—Ç–æ fit() "—É–∑–Ω–∞—ë—Ç" —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ä–µ–¥–Ω–µ–µ, std) ‚Äî –µ—Å–ª–∏ –º—ã –æ–±—É—á–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞ validation/test, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–µ–º –≤ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç —á–µ—Å—Ç–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏.
# üí° –í—Å–µ–≥–¥–∞ fit –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ train, –∞ transform ‚Äî –Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
X_train_prepared = preprocessor.fit_transform(X_train)
X_val_prepared = preprocessor.transform(X_val)
X_test_prepared = preprocessor.transform(X_test)


# –î–æ–±–∞–≤–∏–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –∫–≤–∞–¥—Ä–∞—Ç—ã)
poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_prepared = poly.fit_transform(X_train_prepared)
X_val_prepared = poly.transform(X_val_prepared)
X_test_prepared = poly.transform(X_test_prepared)

# –û–±—É—á–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
param_grid = {
    "C": [0.01, 0.1, 1, 10, 100],
    "solver": ["liblinear", "lbfgs"],  # –°–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∞—Å—Å–æ–≤
    "penalty": ["l2"]  # liblinear –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ l1, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
}

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ train
logreg = LogisticRegression(max_iter=10000)
# logreg.fit(X_train_prepared, y_train)


# GridSearchCV: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä
param_grid = {
    "C": [0.01, 0.1, 1, 10, 100],
    "solver": ["lbfgs"],
    "penalty": ["l2"]
}

# cv ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π (folds) –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
# –ö–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å:
# GridSearchCV(..., cv=5)
# –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
# X_train –∏ y_train –¥–µ–ª—è—Ç—Å—è –Ω–∞ 5 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π (folds).
# –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è 5 —Ä–∞–∑:
# –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–∞ 4 —á–∞—Å—Ç—è—Ö, –∞ –ø—è—Ç–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –≤–∞–ª–∏–¥–∞—Ü–∏—è.
# –ò—Ç–æ–≥–æ–≤–∞—è score (accuracy) ‚Äî —ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ 5 –∏—Ç–µ—Ä–∞—Ü–∏—è–º.
# –¢–æ –µ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ cv ‚Äî –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ "–Ω–∞—Å—Ç–æ—è—â–∞—è" —Ç–æ—á–Ω–æ—Å—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞.

# –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å cv –ø–µ—Ä–µ–±–æ—Ä–æ–º, –∫–∞–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä?
# –ù–µ—Ç, —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
# cv ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏, –∞ –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–¥–µ–ª–∏.
# –ü–æ–¥–±–∏—Ä–∞—Ç—å cv, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å "–ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É", ‚Äî —ç—Ç–æ –∫–∞–∫ –¥–≤–æ–π–Ω–æ–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–Ω–∏–µ:
# —Ç—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å —Å–ø–æ—Å–æ–± –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–∞–º–æ–π –æ—Ü–µ–Ω–∫–∏.
# –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–º–µ—â—ë–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ ‚Äî —Ç—ã –ø–æ–¥–±–∏—Ä–∞–µ—à—å –Ω–µ –ª—É—á—à–∏–π C, –∞ –ª—É—á—à–∏–π cv –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ "–≤–µ–∑–µ–Ω–∏—è".

#  –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
# –û–±—ã—á–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç cv=5 –∏–ª–∏ cv=10 –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

grid_search = GridSearchCV(logreg, param_grid, cv=5, scoring="accuracy")
grid_search.fit(X_train_prepared, y_train)

# –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –∏ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
best_model = grid_search.best_estimator_
print("üéØ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:", grid_search.best_params_)
print(f"‚úÖ Accuracy (cross-validation): {grid_search.best_score_:.2%}")

# –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
y_val_pred = best_model.predict(X_val_prepared)

# –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ validation set
val_accuracy = accuracy_score(y_val, y_val_pred)
print(f"üß™ Accuracy –Ω–∞ validation set: {val_accuracy:.2%}")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_test_pred = best_model.predict(X_test_prepared)

# –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
test_accuracy = accuracy_score(y_test, y_test_pred)
print(f"üìå Accuracy –Ω–∞ test set: {test_accuracy:.2%}")

# === –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –î–õ–Ø to_predict.csv ===
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
df_to_predict = pd.read_csv(file_path_read_to_predict)

# –û—Ç–±–æ—Ä –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
X_to_predict = df_to_predict[features]  # —Ç–µ –∂–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: Height, Weight, Age, Score, Group

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–µ–º –∂–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
X_to_predict_prepared = preprocessor.transform(X_to_predict)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º to_predict —Ç–∞–∫ –∂–µ ‚Äî —á–µ—Ä–µ–∑ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
X_to_predict_prepared = poly.transform(X_to_predict_prepared)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_to_predict = best_model.predict(X_to_predict_prepared)

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å y_True (–µ—Å–ª–∏ –µ—Å—Ç—å)
if "quality_True" in df_to_predict.columns:
    y_true = df_to_predict["quality_True"]
    accuracy_on_to_predict = accuracy_score(y_true, y_to_predict)
    print(f"üîç Accuracy –Ω–∞ to_predict.csv: {accuracy_on_to_predict:.2%}")
else:
    print("‚ùó –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–ª–æ–Ω–∫–∞ quality_True –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ to_predict.csv ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å.")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
df_predicted = df_to_predict.copy()
df_predicted["quality"] = y_to_predict

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
df_predicted.to_csv(file_path_write, index=False, encoding="utf-8-sig")
print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path_write}")

print("\nLogistic Regression")
print("üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:")
print(f"Validation:  {val_accuracy:.4f}")
print(f"Test:        {test_accuracy:.4f}")
print(f"Final:        {accuracy_on_to_predict:.4f}")

# Logistic Regression
# üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:
# Validation:  0.6061
# Test:        0.5903
# Final:        0.6062