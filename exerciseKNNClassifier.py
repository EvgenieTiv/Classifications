import os
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree

# üß≠ K-Nearest Neighbors Classifier (KNN)
# üìå –ß—Ç–æ —ç—Ç–æ:
# KNeighborsClassifier ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö –∏ –ø–æ–Ω—è—Ç–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
# –û–Ω –Ω–µ —Å—Ç—Ä–æ–∏—Ç –º–æ–¥–µ–ª—å —è–≤–Ω–æ, –∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏:

# 1. –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, KNN –∏—â–µ—Ç K –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π —Å—Ä–µ–¥–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
# 2. –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ —Å—Ä–µ–¥–∏ —ç—Ç–∏—Ö K.
# 3. –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç—É.

# üéì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:

# –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–µ–Ω.
# –ß–∞—Å—Ç–æ –¥–∞—ë—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –∏ —á–∏—Å—Ç—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö.

# ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:

# –ú–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∫–∞–∂–¥—ã–º –ø—Ä–∏–º–µ—Ä–æ–º.
# –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –º–∞—Å—à—Ç–∞–±—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ‚Äî –ø–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, StandardScaler).
# –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ k.

—Åurrent_dir = os.path.dirname(__file__)  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è .py —Ñ–∞–π–ª
# file_path_read_train = os.path.join(—Åurrent_dir, "synthetic_200_rows_with_logic_filled.csv")
# file_path_read_to_predict = os.path.join(—Åurrent_dir, "to_predict_filled.csv")
# file_path_write = os.path.join(—Åurrent_dir, "to_predict_with_y.csv")

file_path_read = os.path.join(—Åurrent_dir, "winequality_red_train.csv")
file_path_read_to_predict = os.path.join(—Åurrent_dir, "winequality_red_to_predict.csv")
file_path_write = os.path.join(—Åurrent_dir, "winequality_red_to_predict_with_y.csv")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(file_path_read)

# üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
X = df.drop(columns=["quality"])
y = df["quality"]

# üß™ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
# –®–∞–≥ 1. –û—Ç–¥–µ–ª—è–µ–º test
X_temp, X_test, y_temp, y_test = train_test_split(
    X, y, test_size=0.2, random_state=4, stratify=y   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# –®–∞–≥ 2. –î–µ–ª–∏–º X_temp –Ω–∞ train –∏ validation
X_train, X_val, y_train, y_val = train_test_split(
    X_temp, y_temp, test_size=0.2, random_state=4, stratify=y_temp   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# üîç –ù–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
categorical_cols = X.select_dtypes(include=["object", "category"]).columns.tolist()
numerical_cols = X.select_dtypes(include=["int64", "float64"]).columns.tolist()

# ‚öôÔ∏è –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numerical_cols),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols)
    ]
)

# üèóÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
X_train_scaled = preprocessor.fit_transform(X_train)
X_val_scaled = preprocessor.transform(X_val)
X_test_scaled = preprocessor.transform(X_test)  # ‚úÖ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

# üß† –û–±—É—á–µ–Ω–∏–µ KNN
param_grid = {'n_neighbors': list(range(1, 21))}

grid_search = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5, scoring='accuracy')

grid_search.fit(X_train_scaled, y_train)

print("üîç –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ k:", grid_search.best_params_)
print("üìà –õ—É—á—à–∞—è —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (cv):", grid_search.best_score_)

# üîÅ –û–±—É—á–∏–º –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º k
knn = grid_search.best_estimator_
y_val_pred = knn.predict(X_val_scaled)
val_accuracy = accuracy_score(y_val, y_val_pred)
print(f"\nüß™ Accuracy –Ω–∞ validation set: {val_accuracy:.4f}")

# 5. –ü—Ä–µ–¥—Å–∫–∞–∂–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_pred = knn.predict(X_test_scaled)

# üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
test_accuracy = accuracy_score(y_test, y_pred)
print("\nüéØ Accuracy –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:", test_accuracy)
print("\nüìã Classification Report:\n", classification_report(y_test, y_pred))
print("üìâ Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
df_to_predict = pd.read_csv(file_path_read_to_predict)

# üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
y_true = df_to_predict["quality_True"]

# üßπ –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–±–µ–∑ y)
X_to_predict = df_to_predict.drop(columns=["quality_True"])

# ‚ôªÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ (—Ç–µ–º –∂–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º!)
X_to_predict_prepared = preprocessor.transform(X_to_predict)


# üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å y_True)
y_pred_predict = knn.predict(X_to_predict_prepared)
accuracy_on_to_predict = accuracy_score(y_true, y_pred_predict)
print("\nüìä Accuracy –Ω–∞ to_predict_multiclass.csv:", accuracy_on_to_predict)
print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(confusion_matrix(y_true, y_pred_predict))
print("\nüßæ –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º:")
print(classification_report(y_true, y_pred_predict, zero_division=0))

# üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
df_to_predict["quality"] = y_pred_predict
df_to_predict.to_csv(file_path_write, index=False)
print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path_write}")

print("\nKNN Classifier")
print("üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:")
print(f"Validation:  {val_accuracy:.4f}")
print(f"Test:        {test_accuracy:.4f}")
print(f"Final:        {accuracy_on_to_predict:.4f}")

# KNN Classifier
# üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:
# Validation:  0.6190
# Test:        0.5521
# Final:        0.5875
