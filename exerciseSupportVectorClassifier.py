import os
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.svm import SVC

# üß† –ß—Ç–æ —Ç–∞–∫–æ–µ SVC?
# üìå –ö—Ä–∞—Ç–∫–æ:
# SVC –∏—â–µ—Ç –≥—Ä–∞–Ω–∏—Ü—É (–≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç—å), –∫–æ—Ç–æ—Ä–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∫–ª–∞—Å—Å—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º.
# –≠—Ç–æ –æ—á–µ–Ω—å –º–æ—â–Ω—ã–π –º–µ—Ç–æ–¥, –æ—Å–æ–±–µ–Ω–Ω–æ:
# –∫–æ–≥–¥–∞ –∫–ª–∞—Å—Å—ã –Ω–µ –ª–∏–Ω–µ–π–Ω–æ —Ä–∞–∑–¥–µ–ª–∏–º—ã
# –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —è–¥–µ—Ä (kernels)

# –í–∞–∂–Ω–æ:
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!
# –ú–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö, –Ω–æ —É –Ω–∞—Å –ø–æ–∫–∞ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ

current_dir = os.path.dirname(__file__)  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è .py —Ñ–∞–π–ª
# file_path_read_train = os.path.join(—Åurrent_dir, "synthetic_200_rows_with_logic_filled.csv")
# file_path_read_to_predict = os.path.join(—Åurrent_dir, "to_predict_filled.csv")
# file_path_write = os.path.join(—Åurrent_dir, "to_predict_with_y.csv")

file_path_read = os.path.join(current_dir, "winequality_red_train.csv")
file_path_read_to_predict = os.path.join(current_dir, "winequality_red_to_predict.csv")
file_path_write = os.path.join(current_dir, "winequality_red_to_predict_with_y.csv")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(file_path_read)

# üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
X = df.drop(columns=["quality"])
y = df["quality"]

# üß™ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
# –®–∞–≥ 1. –û—Ç–¥–µ–ª—è–µ–º test
X_temp, X_test, y_temp, y_test = train_test_split(
    X, y, test_size=0.2, random_state=4, stratify=y   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# –®–∞–≥ 2. –î–µ–ª–∏–º X_temp –Ω–∞ train –∏ validation
X_train, X_val, y_train, y_val = train_test_split(
    X_temp, y_temp, test_size=0.2, random_state=4, stratify=y_temp   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# üîç –ù–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
# GaussianNB –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –±–∏–Ω–∞—Ä–Ω—ã–µ) –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ –¥–ª—è one-hot –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å:
# –≤—Å—ë –µ—â—ë –¥–µ–ª–∞–µ—Ç —Å–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
# –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ö—É–∂–µ, –µ—Å–ª–∏:
# –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Height –∏ Weight)
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –Ω–µ–≥–∞—É—Å—Å–æ–≤—Å–∫–æ–µ

categorical_cols = X.select_dtypes(include=["object", "category"]).columns.tolist()
numerical_cols = X.select_dtypes(include=["int64", "float64"]).columns.tolist()

# ‚öôÔ∏è –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numerical_cols),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols)
    ]
)

# üîß –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
# üìå kernel='rbf'
# –ß—Ç–æ —ç—Ç–æ: —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–º SVC "–≤–∏–¥–∏—Ç" —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏.

# –ó–Ω–∞—á–µ–Ω–∏–µ	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç	–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞
# 'linear'	–ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞	–ï—Å–ª–∏ –∫–ª–∞—Å—Å—ã –ª–∏–Ω–µ–π–Ω–æ —Ä–∞–∑–¥–µ–ª–∏–º—ã
# 'rbf'	–†–∞–¥–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ì–∞—É—Å—Å–æ–≤—Å–∫–æ–µ —è–¥—Ä–æ)	‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
# 'poly'	–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ	–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
# 'sigmoid'	–ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (—Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

# üìå C=1.0
# –ß—Ç–æ —ç—Ç–æ: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ—à–∏–±–∫–∞–º–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏.
# –ó–Ω–∞—á–µ–Ω–∏–µ	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç
# –ú–µ–Ω—å—à–µ (0.1, 0.01)	–ë–æ–ª—å—à–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –æ—à–∏–±–æ–∫, –Ω–æ –≥—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—â–µ ‚Äî –º–µ–Ω–µ–µ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è
# –ë–æ–ª—å—à–µ (10, 100)	–ú–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫, –Ω–æ –≥—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å–ª–æ–∂–Ω–æ–π ‚Äî –±–æ–ª—å—à–µ —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è

# üìå gamma='scale'
# –ß—Ç–æ —ç—Ç–æ: –∫–∞–∫ –¥–∞–ª–µ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ (–≤–∞–∂–Ω–æ –¥–ª—è rbf, poly).

# –ó–Ω–∞—á–µ–Ω–∏–µ	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç
# 'scale' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)	1 / (n_features √ó Var(X))
# 'auto'	1 / n_features
# float (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1, 10)	–≤—Ä—É—á–Ω—É—é ‚Äî —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º "—à–∏—Ä–µ" –≥–∞—É—Å—Å

# üìå –ï—Å–ª–∏ gamma —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ‚Üí –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å—Å—è.
# –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ ‚Üí –±—É–¥–µ—Ç "–ø–ª–æ—Å–∫–∞—è", –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è.
# üü© –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'scale' –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ—Ç–æ–º.

# üìå probability=True
# –ß—Ç–æ —ç—Ç–æ: –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å predict_proba()
# (–∏–Ω–∞—á–µ –º–æ–¥–µ–ª—å –¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ predict() ‚Äî –∂—ë—Å—Ç–∫–∏–µ –º–µ—Ç–∫–∏, –±–µ–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π)

# ‚ö†Ô∏è –ó–∞–º–µ–¥–ª—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ
# ‚úÖ –ù–æ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ ROC-–∫—Ä–∏–≤—ã—Ö)

# –ï—Å–ª–∏ —Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å predict_proba() ‚Äî –º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä.

param_grid = {
    'svc__C': [0.1, 1, 10],
    'svc__gamma': ['scale', 0.1, 1],
    'svc__kernel': ['rbf', 'linear']
}

# # üß† –û–±—É—á–µ–Ω–∏–µ
grid = GridSearchCV(make_pipeline(preprocessor, SVC(probability=False)), param_grid, cv=5)
grid.fit(X_train, y_train)

print("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", grid.best_params_)

# # üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_val_pred = grid.predict(X_val)
val_accuracy = accuracy_score(y_val, y_val_pred)
print(f"\nüß™ Accuracy –Ω–∞ validation set: {val_accuracy:.4f}")

y_pred = grid.predict(X_test)

# # üìä –û—Ü–µ–Ω–∫–∞
test_accuracy = accuracy_score(y_test, y_pred)
print("üéØ Accuracy –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:", test_accuracy)
print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(confusion_matrix(y_test, y_pred))
print("\nüßæ –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º:")
print(classification_report(y_test, y_pred))

# üì• –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
df_to_predict = pd.read_csv(file_path_read_to_predict)
X_to_predict = df_to_predict.drop(columns=["quality_True"])
y_true = df_to_predict["quality_True"]

# üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_pred_real = grid.predict(X_to_predict)

# üìä –û—Ü–µ–Ω–∫–∞
accuracy_on_to_predict = accuracy_score(y_true, y_pred_real)
print("\nüìä Accuracy –Ω–∞ to_predict_multiclass.csv:", accuracy_on_to_predict)
print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(confusion_matrix(y_true, y_pred_real))
print("\nüßæ –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º:")
print(classification_report(y_true, y_pred_real))

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º
df_to_predict["quality"] = y_pred_real
df_to_predict.to_csv(file_path_write, index=False)
print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path_write}")

print("\nSupport Vector Classifier")
print("üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:")
print(f"Validation:  {val_accuracy:.4f}")
print(f"Test:        {test_accuracy:.4f}")
print(f"Final:        {accuracy_on_to_predict:.4f}")

# Support Vector Classifier
# üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:
# Validation:  0.6407
# Test:        0.6007
# Final:        0.5875