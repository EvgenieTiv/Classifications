import os
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree

# üìå –ö—Ä–∞—Ç–∫–æ: Naive Bayes (GaussianNB)

# üß† –ò–¥–µ—è:
# –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É, –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
# –î–µ–ª–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ (–ø–æ—ç—Ç–æ–º—É ‚Äî "–Ω–∞–∏–≤–Ω—ã–π").
# –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é.

# ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
# –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –∏ –ª—ë–≥–∫–∏–π
# –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
# –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ baseline

# ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
# –ü–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω—ã
# –ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã)

current_dir = os.path.dirname(__file__)  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è .py —Ñ–∞–π–ª
# file_path_read_train = os.path.join(—Åurrent_dir, "synthetic_200_rows_with_logic_filled.csv")
# file_path_read_to_predict = os.path.join(—Åurrent_dir, "to_predict_filled.csv")
# file_path_write = os.path.join(—Åurrent_dir, "to_predict_with_y.csv")

file_path_read = os.path.join(current_dir, "winequality_red_train.csv")
file_path_read_to_predict = os.path.join(current_dir, "winequality_red_to_predict.csv")
file_path_write = os.path.join(current_dir, "winequality_red_to_predict_with_y.csv")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv(file_path_read)

# üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
X = df.drop(columns=["quality"])
y = df["quality"]

# üß™ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
# –®–∞–≥ 1. –û—Ç–¥–µ–ª—è–µ–º test
X_temp, X_test, y_temp, y_test = train_test_split(
    X, y, test_size=0.2, random_state=4, stratify=y   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# –®–∞–≥ 2. –î–µ–ª–∏–º X_temp –Ω–∞ train –∏ validation
X_train, X_val, y_train, y_val = train_test_split(
    X_temp, y_temp, test_size=0.2, random_state=4, stratify=y_temp   # ‚¨ÖÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ train –∏ test
)

# üîç –ù–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
# GaussianNB –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –±–∏–Ω–∞—Ä–Ω—ã–µ) –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ –¥–ª—è one-hot –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å:
# –≤—Å—ë –µ—â—ë –¥–µ–ª–∞–µ—Ç —Å–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
# –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ö—É–∂–µ, –µ—Å–ª–∏:
# –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Height –∏ Weight)
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –Ω–µ–≥–∞—É—Å—Å–æ–≤—Å–∫–æ–µ

categorical_cols = X.select_dtypes(include=["object", "category"]).columns.tolist()
numerical_cols = X.select_dtypes(include=["int64", "float64"]).columns.tolist()

# ‚öôÔ∏è –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numerical_cols),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols)
    ]
)

# üîß –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä

# üîó Pipeline ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –º–æ–¥–µ–ª—å) –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.

# üìå GaussianNB ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å –Ω–∞–∏–≤–Ω–æ–≥–æ –±–∞–π–µ—Å–æ–≤—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è:
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
# –ò —á—Ç–æ –∫–∞–∂–¥—ã–π —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –≤ –∫–ª–∞—Å—Å–µ –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ì–∞—É—Å—Å–∞)
# üî¨ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏:
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "good", "poor", ‚Ä¶) –º–æ–¥–µ–ª—å –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç:
# –°—Ä–µ–¥–Ω–µ–µ (Œº) –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞

# –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä:
# –ú–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É, –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–∞—É—Å—Å–∞
# –í—ã–±–∏—Ä–∞–µ—Ç –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é

# üìå –≠—Ç–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –∏ –ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∞—è.

nb_pipeline = make_pipeline(preprocessor, GaussianNB())

# üß† –û–±—É—á–µ–Ω–∏–µ
nb_pipeline.fit(X_train, y_train)

# üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_val_pred = nb_pipeline.predict(X_val)
val_accuracy = accuracy_score(y_val, y_val_pred)
print(f"\nüß™ Accuracy –Ω–∞ validation set: {val_accuracy:.4f}")


y_test_pred = nb_pipeline.predict(X_test)


# üìä –û—Ü–µ–Ω–∫–∞
test_accuracy =  accuracy_score(y_test, y_test_pred)
print("\n‚úÖ Accuracy –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:", test_accuracy)
print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (test):")
print(confusion_matrix(y_test, y_test_pred))
print("\nüßæ –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º (test):")
print(classification_report(y_test, y_test_pred, zero_division=0))

# üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
df_to_predict = pd.read_csv(file_path_read_to_predict)

# üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
y_true = df_to_predict["quality_True"]

# üßπ –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–±–µ–∑ y)
X_to_predict = df_to_predict.drop(columns=["quality_True"])

# üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_pred = nb_pipeline.predict(X_to_predict)

# üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å y_True)
accuracy_on_to_predict = accuracy_score(y_true, y_pred)
print("\nüìä Accuracy –Ω–∞ to_predict_multiclass.csv:", accuracy_on_to_predict)
print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(confusion_matrix(y_true, y_pred))
print("\nüßæ –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º:")
print(classification_report(y_true, y_pred, zero_division=0))

# üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
df_to_predict["quality"] = y_pred
df_to_predict.to_csv(file_path_write, index=False)
print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path_write}")

print("\nNaive Bayes")
print("üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:")
print(f"Validation:  {val_accuracy:.4f}")
print(f"Test:        {test_accuracy:.4f}")
print(f"Final:        {accuracy_on_to_predict:.4f}")

# Naive Bayes
# üìä Accuracy –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö:
# Validation:  0.5541
# Test:        0.5521
# Final:        0.5437

